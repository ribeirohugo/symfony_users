openapi: 3.0.0
info:
    title: Symfony Users API
    description:  Symfony Rest API to manage users.
    version: 1.0.0
    contact:
        name: Hugo Ribeiro
        url: https://github.com/ribeirohugo
paths:
    /users:
        get:
            operationId: listUsers
            description: Returns a list of users.
            tags:
            - Users
            responses:
                '200':
                    description: Returns an array of users.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/UserDto'
        post:
            operationId: createUser
            description: Creates a user and returns created user when succeeds.
            tags:
                - Users
            requestBody:
                description: User creation data body.
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserEditableDto'
            responses:
                '200':
                    description: Returns the created user.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserDto'
                '400':
                    description: Invalid user create request.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
    /users/{userId}:
        get:
            operationId: singleUser
            description: Returns a user for a given Id.
            tags:
                - Users
            parameters:
                - in: path
                  name: userId
                  schema:
                      type: string
                      format: uuid
                  required: true
                  description: Numeric ID of a user
            responses:
                '200':
                    description: Returns a user.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserDto'
                '404':
                    description: User was not found for the given Id.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
        put:
            operationId: updateUser
            description: Updates a user and returns updated user when succeeds.
            tags:
                - Users
            parameters:
                - in: path
                  name: userId
                  schema:
                      type: string
                      format: uuid
                  required: true
                  description: Numeric ID of a user
            requestBody:
                description: User edit data body.
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserEditableDto'
            responses:
                '200':
                    description: Returns the updated user.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserDto'
                '400':
                    description: Invalid user create request.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '404':
                    description: User with the given user Id doesn't exist.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
        delete:
            operationId: deleteUser
            description: Deletes a user for a given Id.
            tags:
                - Users
            parameters:
                - in: path
                  name: userId
                  schema:
                      type: string
                      format: uuid
                  required: true
                  description: Numeric ID of a user.
            responses:
                '204':
                    description: User successfully deleted.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserDto'
                '404':
                    description: User with the given user Id doesn't exist.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
    /users/email:
        get:
            operationId: findUserByEmail
            description: Returns a user for a given email.
            tags:
                - Users
            parameters:
                - in: query
                  name: userEmail
                  schema:
                      type: string
                      format: email
                  required: true
                  description: User email.
            responses:
                '200':
                    description: Returns a user.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserDto'
                '404':
                    description: User was not found for the given email.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
    /login:
        post:
            operationId: login
            description: Checks if login data is valid and return the user data if the authentication is successful.
            tags:
                - Authentication
            requestBody:
                description: Login data body.
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LoginDto'
            responses:
                '200':
                    description: Returns a user.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserDto'
                '401':
                    description: Login data is invalid.
components:
    schemas:
        UserDto:
            type: object
            properties:
                id:
                    type: string
                    format: uuid
                name:
                    type: string
                email:
                    type: string
                    format: email
                phone:
                    type: string
                createdAt:
                    type: string
                    format: date-time
                updatedAt:
                    type: string
                    format: date-time
        UserEditableDto:
            type: object
            properties:
                name:
                    type: string
                email:
                    type: string
                    format: email
                password:
                    type: string
                phone:
                    type: string
        LoginDto:
            type: object
            properties:
                email:
                    type: string
                    format: email
                password:
                    type: string
        Error:
            type: object
            properties:
                code:
                    type: integer
                    format: int32
                message:
                    type: string
